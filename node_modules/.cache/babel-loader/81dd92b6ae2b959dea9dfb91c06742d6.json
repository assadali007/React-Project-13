{"ast":null,"code":"var _jsxFileName = \"/Users/asadali/WebstormProjects/tenzies/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Die from './components/Die';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  /**\n   * Challenge:\n   *\n   * Create state to hold our array of numbers. (Initialize\n   * the state by calling our `allNewDice` function so it\n   * loads all new dice as soon as the app loads)\n   *\n   * Map over the state numbers array to generate our array\n   * of Die elements and render those in place of our\n   * manually-written 10 Die elements.\n   */\n  const [dice, allDice] = React.useState([]);\n  console.log(dice);\n\n  function allNewDice() {\n    allDice(() => {\n      const newDice = [];\n\n      for (let i = 0; i < 10; i++) {\n        newDice.push(Math.ceil(Math.random() * 6));\n      }\n\n      return newDice;\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dice-container\",\n      children: [/*#__PURE__*/_jsxDEV(Die, {\n        value: \"1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 14\n      }, this), /*#__PURE__*/_jsxDEV(Die, {\n        value: \"1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 14\n      }, this), /*#__PURE__*/_jsxDEV(Die, {\n        value: \"1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 14\n      }, this), /*#__PURE__*/_jsxDEV(Die, {\n        value: \"1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 14\n      }, this), /*#__PURE__*/_jsxDEV(Die, {\n        value: \"1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 14\n      }, this), /*#__PURE__*/_jsxDEV(Die, {\n        value: \"1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 14\n      }, this), /*#__PURE__*/_jsxDEV(Die, {\n        value: \"1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 14\n      }, this), /*#__PURE__*/_jsxDEV(Die, {\n        value: \"1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 14\n      }, this), /*#__PURE__*/_jsxDEV(Die, {\n        value: \"1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 14\n      }, this), /*#__PURE__*/_jsxDEV(Die, {\n        value: \"1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 14\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 10\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"x8YzlP/qF/uEd0KrgPszlX4Wh50=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Die","App","dice","allDice","useState","console","log","allNewDice","newDice","i","push","Math","ceil","random"],"sources":["/Users/asadali/WebstormProjects/tenzies/src/App.js"],"sourcesContent":["import React from 'react';\nimport Die from './components/Die';\n\n\n\nfunction App() {\n    /**\n     * Challenge:\n     *\n     * Create state to hold our array of numbers. (Initialize\n     * the state by calling our `allNewDice` function so it\n     * loads all new dice as soon as the app loads)\n     *\n     * Map over the state numbers array to generate our array\n     * of Die elements and render those in place of our\n     * manually-written 10 Die elements.\n     */\n    const [dice,allDice] = React.useState([])\n    console.log(dice)\n\n    function allNewDice() {\n        allDice( () => {\n            const newDice = []\n            for (let i =0; i<10; i++ ) {\n                newDice.push(Math.ceil(Math.random()*6))\n            }\n            return newDice\n        })\n\n    }\n\n    return (\n        <main>\n         <div className=\"dice-container\">\n             <Die value=\"1\" />\n             <Die value=\"1\" />\n             <Die value=\"1\" />\n             <Die value=\"1\" />\n             <Die value=\"1\" />\n             <Die value=\"1\" />\n             <Die value=\"1\" />\n             <Die value=\"1\" />\n             <Die value=\"1\" />\n             <Die value=\"1\" />\n         </div>\n\n        </main>\n    )\n}\n\nexport default App;\n"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,kBAAhB;;;AAIA,SAASC,GAAT,GAAe;EAAA;;EACX;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAM,CAACC,IAAD,EAAMC,OAAN,IAAiBJ,KAAK,CAACK,QAAN,CAAe,EAAf,CAAvB;EACAC,OAAO,CAACC,GAAR,CAAYJ,IAAZ;;EAEA,SAASK,UAAT,GAAsB;IAClBJ,OAAO,CAAE,MAAM;MACX,MAAMK,OAAO,GAAG,EAAhB;;MACA,KAAK,IAAIC,CAAC,GAAE,CAAZ,EAAeA,CAAC,GAAC,EAAjB,EAAqBA,CAAC,EAAtB,EAA2B;QACvBD,OAAO,CAACE,IAAR,CAAaC,IAAI,CAACC,IAAL,CAAUD,IAAI,CAACE,MAAL,KAAc,CAAxB,CAAb;MACH;;MACD,OAAOL,OAAP;IACH,CANM,CAAP;EAQH;;EAED,oBACI;IAAA,uBACC;MAAK,SAAS,EAAC,gBAAf;MAAA,wBACI,QAAC,GAAD;QAAK,KAAK,EAAC;MAAX;QAAA;QAAA;QAAA;MAAA,QADJ,eAEI,QAAC,GAAD;QAAK,KAAK,EAAC;MAAX;QAAA;QAAA;QAAA;MAAA,QAFJ,eAGI,QAAC,GAAD;QAAK,KAAK,EAAC;MAAX;QAAA;QAAA;QAAA;MAAA,QAHJ,eAII,QAAC,GAAD;QAAK,KAAK,EAAC;MAAX;QAAA;QAAA;QAAA;MAAA,QAJJ,eAKI,QAAC,GAAD;QAAK,KAAK,EAAC;MAAX;QAAA;QAAA;QAAA;MAAA,QALJ,eAMI,QAAC,GAAD;QAAK,KAAK,EAAC;MAAX;QAAA;QAAA;QAAA;MAAA,QANJ,eAOI,QAAC,GAAD;QAAK,KAAK,EAAC;MAAX;QAAA;QAAA;QAAA;MAAA,QAPJ,eAQI,QAAC,GAAD;QAAK,KAAK,EAAC;MAAX;QAAA;QAAA;QAAA;MAAA,QARJ,eASI,QAAC,GAAD;QAAK,KAAK,EAAC;MAAX;QAAA;QAAA;QAAA;MAAA,QATJ,eAUI,QAAC,GAAD;QAAK,KAAK,EAAC;MAAX;QAAA;QAAA;QAAA;MAAA,QAVJ;IAAA;MAAA;MAAA;MAAA;IAAA;EADD;IAAA;IAAA;IAAA;EAAA,QADJ;AAiBH;;GA3CQP,G;;KAAAA,G;AA6CT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}