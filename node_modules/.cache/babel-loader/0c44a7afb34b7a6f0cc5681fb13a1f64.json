{"ast":null,"code":"var _jsxFileName = \"/Users/asadali/WebstormProjects/tenzies/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport Die from \"./components/Die\";\n/**\n * Challenge:\n *\n * Create state to hold our array of numbers. (Initialize\n * the state by calling our `allNewDice` function so it\n * loads all new dice as soon as the app loads)\n *\n * Map over the state numbers array to generate our array\n * of Die elements and render those in place of our\n * manually-written 10 Die elements.\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const [dice, setDice] = React.useState(allNewDice());\n\n  function allNewDice() {\n    const newDice = [];\n\n    for (let i = 0; i < 10; i++) {\n      newDice.push(Math.ceil(Math.random() * 6));\n    }\n\n    return newDice;\n  }\n\n  const diceElements = dice.map(die => /*#__PURE__*/_jsxDEV(Die, {\n    value: die\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 42\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dice-container\",\n      children: diceElements\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"FBcbDbTSXYNs4QNsRKPH911OvUI=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Die","App","dice","setDice","useState","allNewDice","newDice","i","push","Math","ceil","random","diceElements","map","die"],"sources":["/Users/asadali/WebstormProjects/tenzies/src/App.js"],"sourcesContent":["import React from \"react\"\nimport Die from \"./components/Die\"\n\n/**\n * Challenge:\n *\n * Create state to hold our array of numbers. (Initialize\n * the state by calling our `allNewDice` function so it\n * loads all new dice as soon as the app loads)\n *\n * Map over the state numbers array to generate our array\n * of Die elements and render those in place of our\n * manually-written 10 Die elements.\n */\n\nexport default function App() {\n    const [dice, setDice] = React.useState(allNewDice())\n\n    function allNewDice() {\n        const newDice = []\n        for (let i = 0; i < 10; i++) {\n            newDice.push(Math.ceil(Math.random() * 6))\n        }\n        return newDice\n    }\n\n    const diceElements = dice.map(die => <Die value={die} />)\n    return (\n        <main>\n            <div className=\"dice-container\">\n                {diceElements}\n            </div>\n        </main>\n    )\n}"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAe,SAASC,GAAT,GAAe;EAAA;;EAC1B,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,KAAK,CAACK,QAAN,CAAeC,UAAU,EAAzB,CAAxB;;EAEA,SAASA,UAAT,GAAsB;IAClB,MAAMC,OAAO,GAAG,EAAhB;;IACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;MACzBD,OAAO,CAACE,IAAR,CAAaC,IAAI,CAACC,IAAL,CAAUD,IAAI,CAACE,MAAL,KAAgB,CAA1B,CAAb;IACH;;IACD,OAAOL,OAAP;EACH;;EAED,MAAMM,YAAY,GAAGV,IAAI,CAACW,GAAL,CAASC,GAAG,iBAAI,QAAC,GAAD;IAAK,KAAK,EAAEA;EAAZ;IAAA;IAAA;IAAA;EAAA,QAAhB,CAArB;EACA,oBACI;IAAA,uBACI;MAAK,SAAS,EAAC,gBAAf;MAAA,UACKF;IADL;MAAA;MAAA;MAAA;IAAA;EADJ;IAAA;IAAA;IAAA;EAAA,QADJ;AAOH;;GAnBuBX,G;;KAAAA,G"},"metadata":{},"sourceType":"module"}